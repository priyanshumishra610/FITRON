version: '3.8'

services:
  # FITRON Backend API
  fitron-backend:
    build:
      context: ..
      dockerfile: deployment/Dockerfile
    container_name: fitron-backend
    ports:
      - "8000:8000"
    environment:
      - DATABASE_URL=postgresql://fitron_user:fitron_password@postgres:5432/fitron_db
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET_KEY=your-super-secret-jwt-key-change-in-production
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - CLIP_MODEL_PATH=/app/models/clip
    volumes:
      - ../data:/app/data
      - ../models:/app/models
    depends_on:
      - postgres
      - redis
    networks:
      - fitron-network
    restart: unless-stopped

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: fitron-postgres
    environment:
      - POSTGRES_DB=fitron_db
      - POSTGRES_USER=fitron_user
      - POSTGRES_PASSWORD=fitron_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - fitron-network
    restart: unless-stopped

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: fitron-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - fitron-network
    restart: unless-stopped

  # MongoDB (for analytics and logs)
  mongodb:
    image: mongo:6
    container_name: fitron-mongodb
    environment:
      - MONGO_INITDB_ROOT_USERNAME=fitron_admin
      - MONGO_INITDB_ROOT_PASSWORD=fitron_admin_password
    volumes:
      - mongodb_data:/data/db
    ports:
      - "27017:27017"
    networks:
      - fitron-network
    restart: unless-stopped

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: fitron-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - ./ssl:/etc/nginx/ssl
    depends_on:
      - fitron-backend
    networks:
      - fitron-network
    restart: unless-stopped

  # MLflow Tracking Server
  mlflow:
    image: python:3.11-slim
    container_name: fitron-mlflow
    working_dir: /app
    command: >
      sh -c "pip install mlflow psycopg2-binary &&
             mlflow server --host 0.0.0.0 --port 5000 --backend-store-uri postgresql://fitron_user:fitron_password@postgres:5432/mlflow_db"
    environment:
      - MLFLOW_TRACKING_URI=http://localhost:5000
    ports:
      - "5000:5000"
    depends_on:
      - postgres
    networks:
      - fitron-network
    restart: unless-stopped

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: fitron-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - fitron-network
    restart: unless-stopped

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: fitron-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=fitron_admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus
    networks:
      - fitron-network
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:
  mongodb_data:
  prometheus_data:
  grafana_data:

networks:
  fitron-network:
    driver: bridge 